import 'package:keep_notes_clone/models/label.dart';
import 'package:keep_notes_clone/models/note.dart';
import 'package:sqflite/sqflite.dart';

class SQLiteHandler {
  Database _database;

  SQLiteHandler() {
    print('SQlitehandler constructor  #1');
    _initialized = _openOrCreateDatabase();
    print('SQlitehandler constructor  #2');
  }

  Future<bool> _initialized;

  Future<bool> get initialized => _initialized;

  Future<bool> _openOrCreateDatabase() async {
    var databasesPath = await getDatabasesPath();
    String dbName = 'demo.db';
    String path = '$databasesPath/$dbName';
    print(path);

    _database = await openDatabase(path, version: 1,
        onCreate: (Database db, int version) {
      db.execute('''CREATE TABLE note (
              id INTEGER PRIMARY KEY, 
              title TEXT, 
              text TEXT, 
              pinned INTEGER, 
              archived INTEGER, 
              deleted INTEGER, 
              colorIndex INTEGER, 
              lastEdited TEXT, 
              reminderTime TEXT,
        );''');
      db.execute('''CREATE TABLE label (
              id INTEGER PRIMARY KEY, 
              name TEXT,
        );''');
      db.execute('''CREATE TABLE note_label (
              note_id INTEGER,
              label_id INTEGER,
              FOREIGN KEY(note_id) REFERENCES note(id),
              FOREIGN KEY(label_id) REFERENCES label(id),
        );''');
    });
    return true;
  }

  /// returns the auto-incremented id generated by the local DB
  Future<int> insertNote(Note note) async {
    var initialized = await _initialized;
    assert(initialized);

    String noteTitle = note.title;
    String noteText = note.text;
    int notePinned = (note.pinned) ? 1 : 0;
    int noteArchived = (note.archived) ? 1 : 0;
    int noteDeleted = (note.deleted) ? 1 : 0;
    int noteColorIndex = note.colorIndex;
    String noteLastEdited = note.lastEdited.toString();
    String noteReminderTime = note.reminderTime.toString();

    return _database.rawInsert(
        '''INSERT INTO note (title, text, pinned, archived, deleted, colorIndex, lastEdited, reminderTime) 
      VALUES ("$noteTitle", "$noteText", $notePinned, $noteArchived, $noteDeleted,
              $noteColorIndex, "$noteLastEdited", "$noteReminderTime");''');
  }

  Future<int> insertLabel(Label label) async {
    var initialized = await _initialized;
    assert(initialized);

    String labelName = label.name;

    return _database
        .rawInsert('''INSERT INTO label (name) VALUES ("$labelName");''');
  }

  Future<void> updateNote(Note note) async {
    var initialized = await _initialized;
    assert(initialized);

    String noteTitle = note.title;
    String noteText = note.text;
    int notePinned = (note.pinned) ? 1 : 0;
    int noteArchived = (note.archived) ? 1 : 0;
    int noteDeleted = (note.deleted) ? 1 : 0;
    int noteColorIndex = note.colorIndex;
    String noteLastEdited = note.lastEdited.toString();
    String noteReminderTime = note.reminderTime.toString();

    _database.rawUpdate(
      '''UPDATE note
         SET title = "$noteTitle",
             text = "$noteText",
             pinned = $notePinned,
             archived = $noteArchived,
             deleted = $noteDeleted,
             colorIndex = $noteColorIndex,
             lastEdited = "$noteLastEdited",
             reminderTime = "$noteReminderTime"
         WHERE id = ${note.id};'''
    );

  }




  Future<List<Map<String, dynamic>>> readAllNotes() async {
    var initialized = await _initialized;
    assert(initialized);

    return _database.rawQuery('SELECT * FROM note');
  }

  Future<List<Map<String, dynamic>>> readAllLabels() async {
    var initialized = await _initialized;
    assert(initialized);

    return _database.rawQuery('SELECT * FROM label');
  }



}
